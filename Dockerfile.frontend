# -----
# Build Stage - Install dependencies and build the app
# -----
FROM ubuntu:20.04 AS build-env

ARG FRONTEND_DIR=frontend

# Set timezone (required for the dependency "tzdata")
ENV TZ=Europe/Stockholm
RUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone

# Install flutter dependencies
RUN apt-get update && apt-get install -y curl git wget unzip libgconf-2-4 gdb libstdc++6 libglu1-mesa fonts-droid-fallback lib32stdc++6 python3 && apt-get clean && rm -rf /var/lib/apt/lists/*

# Prepare required folder structure
RUN mkdir -p /usr/local/flutter/ && mkdir /app/

# Add user without root priviledges
RUN groupadd flutteruser && useradd -m -g flutteruser flutteruser
RUN chown -R flutteruser /usr/local/flutter/
RUN chown -R flutteruser /app/
USER flutteruser

# Clone the flutter repo and checkout a specific version (tag number relates to the latest stable release)
RUN git clone https://github.com/flutter/flutter.git /usr/local/flutter
WORKDIR /usr/local/flutter
RUN git fetch origin && git switch --detach 2.10.2

# Set flutter environment path
ENV PATH="/usr/local/flutter/bin:/usr/local/flutter/bin/cache/dart-sdk/bin:${PATH}"

# Run flutter doctor
RUN flutter doctor

# Enable flutter web
RUN flutter channel stable
RUN flutter upgrade
RUN flutter config --enable-web


# Copy relevant flutter web files and build it
COPY --chown=flutteruser /lib /app/lib
#COPY --chown=flutteruser ${FRONTEND_DIR}/assets /app/assets
COPY --chown=flutteruser /pubspec.yaml /pubspec.lock /app/
COPY --chown=flutteruser /web /app/web
#RUN flutter pub get
WORKDIR /app/
RUN flutter build web

# -----
# Stage 2 - Create the run-time image
# -----
FROM docker.io/library/nginx:1.21-alpine

ARG FRONTEND_DIR=frontend

# Copy server configuration files
COPY --chown=nginx:nginx /server/nginx.conf /etc/nginx/nginx.conf
COPY --chown=nginx:nginx /server/nginx.default.conf /etc/nginx/conf.d/default.conf
COPY --chown=nginx:nginx /server/docker-entrypoint.sh /

# Add permissions for user 'nginx'
RUN chown -R nginx:nginx /var/cache/nginx && \
    chown -R nginx:nginx /var/log/nginx && \
    chown -R nginx:nginx /etc/nginx/conf.d
RUN touch /var/run/nginx.pid && \
    chown -R nginx:nginx /var/run/nginx.pid

# Switch to non-root user 'nginx'
USER nginx

# Copy flutter web files from the build stage
COPY --from=build-env --chown=nginx:nginx /app/build/web /usr/share/nginx/html

EXPOSE 80
EXPOSE 443

# Make server startup script executable and start the web server
RUN ["chmod", "+x", "/docker-entrypoint.sh"]


ENTRYPOINT [ "/docker-entrypoint.sh"]
CMD ["nginx", "-g", "daemon off;"]